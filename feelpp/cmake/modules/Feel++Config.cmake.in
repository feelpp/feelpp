# - Config file for the Feel++ package
# This module looks for Feel (Library for the Finite Element Method) support
# It defines the following variables
#  FEELPP_INCLUDE_DIR = where feel/feelcore/feel.hpp can be found
#  FEELPP_LIBRARY    = the feel++ library
#  FEELPP_LIBRARIES  = libraries of feel++ dependencies

set(FEELPP_INSTALL_DIR @CMAKE_INSTALL_PREFIX@)
set(FEELPP_DIR ${FEELPP_INSTALL_DIR})
set(FEELPP_PREFIX ${FEELPP_INSTALL_DIR})
set(FEELPP_DATADIR @FEELPP_DATADIR@)
set(FEELPP_CASESDIR @FEELPP_CASESDIR@)
set(FEELPP_TOOLBOXCASESDIR @FEELPP_TOOLBOXCASESDIR@)
set(FEELPP_LIBDIR @FEELPP_LIBDIR@)
set(FEELPP_PLUGINDIR @FEELPP_PLUGINDIR@)

set(LSB_RELEASE_ID_SHORT @LSB_RELEASE_ID_SHORT@)
set(LSB_RELEASE_CODENAME_SHORT @LSB_RELEASE_CODENAME_SHORT@)
set(LSB_RELEASE_VERSION_SHORT @LSB_RELEASE_VERSION_SHORT@)

if (0)
set(FEELPP_CONFIG_FILE ${CMAKE_CURRENT_LIST_FILE})
message(STATUS "[Feel++] Using config file: ${FEELPP_CONFIG_FILE}")

get_filename_component(_CONFIG_DIR ${FEELPP_CONFIG_FILE} PATH)
get_filename_component(TOP_INSTALL_DIR ${_CONFIG_DIR}/../../../../ ABSOLUTE)
message(STATUS "[Feel++] Current installation directory: ${TOP_INSTALL_DIR}")
set(FEELPP_DIR ${TOP_INSTALL_DIR})


endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR})
foreach( dep feelpp_gflags glog nlopt )
  set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${FEELPP_DIR}/share/feelpp/${dep}/cmake )
endforeach()

set(FEELPP_FOUND "1")
set(Feel++_FOUND "1")

set(CTEST_TIMEOUT "@CTEST_TIMEOUT@")
message(STATUS "[feelpp] timeout set to ${CTEST_TIMEOUT}s in tests")
set(NProcs2 "@NProcs2@")
message(STATUS "[feelpp] use up to ${NProcs2} MPI processes in parallel tests")

set(FEELPP_CXX_COMPILER_ID "@CMAKE_CXX_COMPILER_ID@")
set(FEELPP_CXX_COMPILER_VERSION "@CMAKE_CXX_COMPILER_VERSION@")
set(FEELPP_CXX_STANDARD @CMAKE_CXX_STANDARD@)
set(FEELPP_CXX_STANDARD_REQUIRED @CMAKE_CXX_STANDARD_REQUIRED@)

set(FEELPP_C_FLAGS "@CMAKE_C_FLAGS@")
set(FEELPP_CXX_FLAGS "@CMAKE_CXX_FLAGS@")

set(FEELPP_CMAKE_BUILD_TYPE @CMAKE_BUILD_TYPE@)



set(FEELPP_CONTRIB_ENABLED_OPTIONS "@FEELPP_CONTRIB_ENABLED_OPTIONS@")
set(FEELPP_ENABLED_OPTIONS "@FEELPP_ENABLED_OPTIONS@")
# Feel++ mesh configuration
set(FEELPP_MESH_MAX_ORDER "@FEELPP_MESH_MAX_ORDER@")
set(FEELPP_INSTANTIATION_ORDER_MAX "@FEELPP_INSTANTIATION_ORDER_MAX@")

set(BOOST_MIN_VERSION "@BOOST_MIN_VERSION@")
set(BOOST_COMPONENTS_REQUIRED "@BOOST_COMPONENTS_REQUIRED@")
# Add info about with what Feel++ has been built
#set(FEELPP_HAS_GFLAGS "@FEELPP_HAS_GFLAGS@")
#set(FEELPP_HAS_GLOG "@FEELPP_HAS_GLOG@" )
#set(FEELPP_HAS_GINAC "@FEELPP_HAS_GINAC@" )
#set(FEELPP_HAS_METIS "@FEELPP_HAS_METIS@")
#set(FEELPP_HAS_NLOPT "@FEELPP_HAS_NLOPT@")
set(FEELPP_HAS_IPOPT "@FEELPP_HAS_IPOPT@")
set(FEELPP_HAS_EIGEN3 "@FEELPP_HAS_EIGEN3@")
set(FEELPP_USE_EXTERNAL_EIGEN3 "@FEELPP_USE_EXTERNAL_EIGEN3@")
#set(FEELPP_HAS_KWSYS "@FEELPP_HAS_KWSYS@")
#set(FEELPP_HAS_PYBIND11 "@FEELPP_HAS_PYBIND11@")
#set(FEELPP_HAS_BSONCXX "@FEELPP_HAS_BSONCXX@")
#set(FEELPP_HAS_MONGOCXX "@FEELPP_HAS_MONGOCXX@")
set(FEELPP_HAS_ANN "@FEELPP_HAS_ANN_H@")
#set(FEELPP_HAS_GMSH "@FEELPP_HAS_GMSH@")
set(FEELPP_HAS_HDF5 "@FEELPP_HAS_HDF5@")
set(FEELPP_HDF5_PKGCONFIG "@HDF5_PKGCONFIG@")
set(FEELPP_HAS_PARAVIEW "@FEELPP_HAS_PARAVIEW@")
set(FEELPP_HAS_VTK "@FEELPP_HAS_VTK@")
#set(FEELPP_VTK_INSITU_ENABLED "@FEELPP_VTK_INSITU_ENABLED@")
set(FEELPP_PARAVIEW_DIR "@FEELPP_PARAVIEW_DIR@")
set(FEELPP_VTK_DIR "@FEELPP_VTK_DIR@")
if ( NOT FEELPP_PARAVIEW_DIR STREQUAL "" )
  set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${FEELPP_PARAVIEW_DIR} )
elseif ( NOT FEELPP_VTK_DIR STREQUAL "" )
  set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${FEELPP_VTK_DIR} )
endif()
#set(FEELPP_HAS_PETSC "@FEELPP_HAS_PETSC@")
#set(FEELPP_HAS_SLEPC "@FEELPP_HAS_SLEPC@")
#set(FEELPP_HAS_VTK "@FEELPP_HAS_VTK@")
#set(FEELPP_HAS_PYTHON "@FEELPP_HAS_PYTHON@")
set(FEELPP_HAS_MPI4PY "@FEELPP_HAS_MPI4PY@")
set(FEELPP_HAS_PETSC4PY "@FEELPP_HAS_PETSC4PY@")
set(FEELPP_HAS_MO2FMU "@FEELPP_HAS_MO2FMU@")
set(FEELPP_HAS_SLEPC4PY "@FEELPP_HAS_SLEPC4PY@")
set(FEELPP_PYTHON_MODULE_PATH "@FEELPP_PYTHON_MODULE_PATH@")
#set(FEELPP_HAS_OPENTURNS "@FEELPP_HAS_OPENTURNS@")
set(FEELPP_HAS_OCTAVE "@FEELPP_HAS_OCTAVE@")
set(FEELPP_HAS_GLPK "@FEELPP_HAS_GLPK@")

set(FEELPP_HAS_MMG "@FEELPP_HAS_MMG@")
set(FEELPP_HAS_PARMMG "@FEELPP_HAS_PARMMG@")


set(FEELPP_HAS_ASCIIDOCTOR "@FEELPP_HAS_ASCIIDOCTOR@")
if (FEELPP_HAS_ASCIIDOCTOR)
  set(FEELPP_HAS_ASCIIDOCTOR_MANPAGE "@FEELPP_HAS_ASCIIDOCTOR_MANPAGE@")
  set(FEELPP_HAS_ASCIIDOCTOR_HTML5 "@FEELPP_HAS_ASCIIDOCTOR_HTML5@")
  set(FEELPP_A2M "@FEELPP_A2M@")
  set(FEELPP_A2H "@FEELPP_A2H@")
  set(FEELPP_STYLESHEET "@FEELPP_STYLESHEET@")
endif()

set(FEELPP_HAS_CLING_INTERPRETER "@FEELPP_HAS_CLING_INTERPRETER@")
if (FEELPP_HAS_CLING_INTERPRETER)
  set(FEELPP_CLING_BIN "@FEELPP_CLING_BIN@")
endif()

# OpenModelica
set(FEELPP_HAS_OMC "@FEELPP_HAS_OMC@")
set(OMC_FOUND @OMC_FOUND@ )
set(OMC_COMPILER "@OMC_COMPILER@" )
set(OMC_INCLUDE_DIR "@OMC_INCLUDE_DIR@" )
set(OMCGC_LIBRARY "@OMCGC_LIBRARY@" )
set(SIMULATIONRUNTIMEC_LIBRARY "@SIMULATIONRUNTIMEC_LIBRARY@")

#FMI
# set(FEELPP_HAS_FMILIB "@FEELPP_HAS_FMILIB@")
set(FMILIB_INCLUDE_DIR "@FMILIB_INCLUDE_DIR@" )
set(FMILIB_LIBRARIES "@FMILIB_LIBRARIES@" )

set(Python3_EXECUTABLE "@Python3_EXECUTABLE@")
set(Python3_INCLUDE_DIRS "@Python3_INCLUDE_DIRS@")
set(Python3_LIBRARIES "@Python3_LIBRARIES@")

set(MPI4PY_FOUND "@MPI4PY_FOUND@")
set(MPI4PY_INCLUDE_DIR "@MPI4PY_INCLUDE_DIR@")

set(MPI_CXX_FOUND "@MPI_CXX_FOUND")
set(MPI_CXX_COMPILER "@MPI_CXX_COMPILER@")
set(MPI_CXX_COMPILE_FLAGS "@MPI_CXX_COMPILE_FLAGS@")
set(MPI_CXX_INCLUDE_PATH "@MPI_CXX_INCLUDE_PATH@")
set(MPI_CXX_LINK_FLAGS "@MPI_CXX_LINK_FLAGS@")
set(MPI_CXX_LIBRARIES "@MPI_CXX_LIBRARIES@")

set(MPIEXEC "@MPIEXEC@")
set(MPIEXEC_NUMPROC_FLAG "@MPIEXEC_NUMPROC_FLAG@")
set(MPIEXEC_PREFLAGS "@MPIEXEC_PREFLAGS@")
set(MPIEXEC_POSTFLAGS "@MPIEXEC_POSTFLAGS@")

set(PETSC4PY_FOUND "@PETSC4PY_FOUND@")
set(PETSC4PY_INCLUDE_DIR "@PETSC4PY_INCLUDE_DIR@")

set(FEELPP_MO2FMU_FOUND "@FEELPP_HAS_MO2FMU@")
set(FEELPP_MO2FMU "@FEELPP_MO2FMU@")

set(GMSH_MAJOR_VERSION "@GMSH_MAJOR_VERSION@")
set(GMSH_MINOR_VERSION "@GMSH_MINOR_VERSION@")
set(GMSH_PATCH_VERSION "@GMSH_PATCH_VERSION@")

#include(${CMAKE_CURRENT_LIST_DIR}/feelpp.boost.config.cmake)
#include(${CMAKE_CURRENT_LIST_DIR}/feelpp.compile.definition.config.cmake)
#include(${CMAKE_CURRENT_LIST_DIR}/feelpp.libraries.config.cmake)
#include(${CMAKE_CURRENT_LIST_DIR}/feelpp.include.config.cmake)
#string(REGEX REPLACE "-framework;([a-zA-Z]+);" "-framework \\1;" FEELPP_LIBRARIES "${FEELPP_LIBRARIES}")

# the variable FEELPP_DONT_SETUP_CMAKE allows the users to not setup the library
# meaning that this file will will automatically use
# include_directories( ... ), add_definitions( ... ),
# set the compiler flags, link_directories( ... )
if (NOT FEELPP_DONT_SETUP_CMAKE)

  if(NOT "${FEELPP_CXX_COMPILER_ID}" MATCHES "${CMAKE_CXX_COMPILER_ID}")
    message(WARNING "[Feel++] Your compiler (${CMAKE_CXX_COMPILER_ID}) does not match the one used to build Feel++ (${FEELPP_CXX_COMPILER_ID})")
  else()
    if(NOT "${FEELPP_CXX_COMPILER_VERSION}" MATCHES "${CMAKE_CXX_COMPILER_VERSION}")
      message(WARNING "[Feel++] Your compiler version (${CMAKE_CXX_COMPILER_VERSION}) does not match the one used to build Feel++ (${FEELPP_CXX_COMPILER_VERSION})")
    else()
      message(STATUS "[Feel++] built with ${FEELPP_CXX_COMPILER_ID} ${FEELPP_CXX_COMPILER_VERSION}")
    endif()
  endif()

  # include_directories(${FEELPP_INCLUDE_DIR})

  # # Get the already loaded definitions
  # get_directory_property( _CURRENT_DEFINITIONS DIRECTORY ${CMAKE_SOURCE_DIR} COMPILE_DEFINITIONS )
  # set_property(DIRECTORY ${CMAKE_SOURCE_DIR} APPEND PROPERTY COMPILE_DEFINITIONS ${FEELPP_COMPILE_DEFINITIONS} ${_CURRENT_DEFINITIONS})
  # unset(_CURRENT_DEFINITIONS)

  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FEELPP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FEELPP_CXX_FLAGS}")
  set(CMAKE_CXX_STANDARD ${FEELPP_CXX_STANDARD})
  set(CMAKE_CXX_STANDARD_REQUIRED ${FEELPP_CXX_STANDARD_REQUIRED})

  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR})
  list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_LIST_DIR}
    )
  message(STATUS "[feelpp] prefix_path: ${CMAKE_PREFIX_PATH}")
  include(feelpp.host)
  include(feelpp.macros)
  include(feelpp.version)
  include(feelpp.directive)
  include(CMakeFindDependencyMacro)

  find_dependency(MPI REQUIRED)
  find_dependency(PkgConfig REQUIRED)
  pkg_search_module(PETSC REQUIRED IMPORTED_TARGET "PETSc>=3.7.0")

  if ( FEELPP_HAS_HDF5 )
    if ( FEELPP_HDF5_PKGCONFIG )
      pkg_search_module(HDF5 REQUIRED IMPORTED_TARGET hdf5)
    else()
      find_dependency(HDF5 REQUIRED)
    endif()
  endif()

  # workaround bug https://github.com/boostorg/boost_install/issues/5
  set(__org ${BUILD_SHARED_LIBS})
  set(BUILD_SHARED_LIBS ON)
  find_dependency(Boost ${BOOST_MIN_VERSION} REQUIRED COMPONENTS ${BOOST_COMPONENTS_REQUIRED})
  set(BUILD_SHARED_LIBS ${__org})

  if ( FEELPP_HAS_ANN )
    find_dependency( ANN )
  endif()
  if ( FEELPP_HAS_GLPK )
    find_dependency( GLPK )
  endif()
  find_dependency(FeelppContrib)
  feelpp_get_compile_definition(Feelpp::feelpp_contrib FEELPP_HAS_PYBIND11)
  if ( FEELPP_HAS_PYBIND11 )
    include(pybind11Tools)
  endif()

  if ( FEELPP_HAS_PARAVIEW )
    find_dependency( ParaView )
  elseif ( FEELPP_HAS_VTK )
    find_dependency( VTK )
  endif()
  #find_dependency( OpenTURNS )

  if ( NOT TARGET Feelpp::feelpp )
    include(${FEELPP_DIR}/share/feelpp/feel/cmake/modules/FeelppTargets.cmake)
  endif()

  MESSAGE(STATUS "[Feel++] version: ${FEELPP_VERSION_STRING}")
  MESSAGE(STATUS "[Feel++] loaded with configuration: ${FEELPP_CMAKE_BUILD_TYPE}")
  MESSAGE(STATUS "[Feel++] loaded with packages: ${FEELPP_ENABLED_OPTIONS}")

  feelpp_set_options( Feelpp::feelpp_contrib "Feel++" )
  feelpp_set_options( Feelpp::feelpp "Feel++" )


endif()


foreach( _FEELPP_COMPONENTS ${Feel++_FIND_COMPONENTS})
  # CRB
  if ( ${_FEELPP_COMPONENTS} MATCHES MOR )
    if ( EXISTS ${FEELPP_INSTALL_DIR}/share/feelpp/mor/cmake/Feel++-MORConfig.cmake )
      include( ${FEELPP_INSTALL_DIR}/share/feelpp/mor/cmake/Feel++-MORConfig.cmake )
      message(STATUS "[Feel++] found component MOR")
    else()
      message(WARNING "[Feel++] component MOR not found")
    endif()
  endif()
  # Toolboxes
  if ( ${_FEELPP_COMPONENTS} MATCHES Toolboxes )
    find_file( _FEELPP_TOOLBOXES_CONFIG_FILE Feel++-ToolboxesConfig.cmake
      PATHS
      ${FEELPP_INSTALL_DIR}/share/feelpp/toolboxes/cmake
      ${FEELPP_TOOLBOXES_DIR}/share/feelpp/toolboxes/cmake
      $ENV{FEELPP_TOOLBOXES_DIR}/share/feelpp/toolboxes/cmake
      )
    if ( _FEELPP_TOOLBOXES_CONFIG_FILE )
      include( ${_FEELPP_TOOLBOXES_CONFIG_FILE} )
      message(STATUS "[Feel++] found component Toolboxes")
    else()
      message(WARNING "[Feel++] component Toolboxes not found")
    endif()
  endif()

endforeach()
