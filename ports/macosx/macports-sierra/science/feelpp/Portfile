# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=cpp:et:sw=4:ts=4:sts=4

# $Id$

#source ${portpath}/../../../macports-xc5/tcl/fixLibsAndExecutables.tcl

PortSystem  1.0
# Portgroup is not an option until we find a way to get rid of the -arch option
#PortGroup   cmake 1.0
#PortGroup   active_variants 1.1
PortGroup           mpi 1.0

name                 feel++
version              0.101.1
master_sites         https://github.com/feelpp/feelpp/releases/download/v${version}/
distname             feelpp-${version}
checksums            rmd160  f0064a2cd332fc88cc4a8d98b2c8ccdc2127c030 \
                     sha256  70418fb0ce9f5069190fcc1677615663dbca71cea39e2b858356476a9e8627cf


categories           science
platforms            macosx darwin freebsd
#universal_variant   no

maintainers          feelpp.org:christophe.prudhomme
description          Finite Element Embedded Library and Language in C++
long_description    \
 Feel++ is a versatile finite element library\
 to solve partial differential equations.\
 \
 Support 1D, 2D, 3D\
 \
 Support the following basic entities: simplices (segment, triangle,\
 tetrahedron) and product of simplices (quadrangle, hexahedron)\
 \
 Support various point sets on these basic entities: equispaced\
 points, quadrature points, interpolation points (Gauss-Lobatto,\
 Fekete, WarpBlend?)\
 \
 Support continuous and discontinuous Galerkin methods\
 \
 Support various polynomial sets:\
 \
  * Lagrange(continuous,discontinuous,all dimensions,all interpolation\
 point sets)\
 \
  * Dubiner(discontinuous), boundary adapted(continuous)\
 \
  * Legendre(discontinuous), boundary adapted(continuous)\
 \
 Provide mathematical concept for higher order abstraction (Function\
 spaces and associated elements, forms and operators)\
 \
 Provide a language embedded in C++ for variational formulations,\
 projection and numerical integration

homepage            http://www.feelpp.org


#worksrcdir	feel++-${version}
configure	{
    file mkdir ${worksrcpath}/build
    system "cd ${worksrcpath}/build && ${configure.cmd} .. ${configure.args} "
    #file mkdir ${worksrcdir}/build
    #system "cd ${worksrcdir}/build && cmake ${configure.args} ../"
}

#build.target feelpp

build {
    if {${build.jobs} ne {} } {
        # only the libfeelpp use // compilation
        system "cd ${worksrcpath}/build && ${build.cmd} feelpp -j ${build.jobs} && ${build.cmd} ${build.target}"
    } else {
        system "cd ${worksrcpath}/build && ${build.cmd} feelpp && ${build.cmd} ${build.target}"
    }
}

configure.env-append  PETSC_DIR=${prefix}/lib/petsc
configure.env-append  SLEPC_DIR=${prefix}/lib/petsc


# make sure to keep below in sync with cmake Portgroup except
# for the configure.args option that mess up feel++
# standard place to install extra CMake modules
set cmake_share_module_dir ${prefix}/share/cmake/modules
configure.cmd       cmake
#configure.pre_args
configure.args      -DCMAKE_INSTALL_PREFIX=${prefix}\
                    -DCMAKE_VERBOSE_MAKEFILE=OFF \
                    -DCMAKE_COLOR_MAKEFILE=ON \
                    -DCMAKE_BUILD_TYPE=Release \
                    -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
                    -DCMAKE_INSTALL_NAME_DIR=${prefix}/lib \
                    -DCMAKE_MODULE_PATH=${cmake_share_module_dir} \
                    -DCMAKE_CXX_COMPILER=${configure.cxx} \
                    -DCMAKE_C_COMPILER=${configure.cc} \
                    -DMPIEXEC=${mpi.exec} \
                    -DFEELPP_ENABLE_DOCUMENTATION=OFF \
                    -DFEELPP_ENABLE_APPLICATIONS=OFF \
                    -DFEELPP_ENABLE_BENCHMARKS=OFF \
                    -DFEELPP_ENABLE_TESTS=OFF \
                    -DFEELPP_ENABLE_RESEARCH=OFF \
                    -DFEELPP_ENABLE_QUICKSTART=OFF \
                    -DFEELPP_MODELS_ENABLE_THERMODYNAMICS=OFF \
                    -DFEELPP_MODELS_ENABLE_SOLIDMECHANICS=OFF \
                    -DFEELPP_MODELS_ENABLE_FLUIDMECHANICS=OFF \
                    -DFEELPP_MODELS_ENABLE_FSI=OFF \
                    -Wno-dev



depends_lib    \
    port:cmake\
    port:boost \
    port:petsc\
    port:slepc\
    port:gmsh \
    port:glpk \
    port:libANN \
    port:libxml2 \
    port:vtk \
    port:cln




require_active_variants petsc atlas
require_active_variants petsc hdf5
require_active_variants petsc ml
require_active_variants petsc mumps
require_active_variants petsc openmpi
require_active_variants petsc parmetis
require_active_variants petsc suitesparse

require_active_variants slepc openmpi

#default_variants   +clang37  +octave +openmpi
# 
# if { ![variant_isset gcc49] && ![variant_isset clang36] && ![variant_isset clang37]  } {
#     default_variants    +clang37
# }

#mpi_variant_name openmpi

#set default_mpi_variants +openmpi
#set active_variants  openmpi
#set mpi.required_variants {+openmpi}
#set mpi.variants {openmpi}
set mpi.require 1
#set mpi.default 1
#mpi_variant_isset openmpi

mpi.enforce_variant   boost
mpi.enforce_variant   gmsh
mpi.enforce_variant   petsc
mpi.enforce_variant   slepc
mpi.setup 

variant doc description {Add doc support} {
  depends_lib_append \
    port:doxygen \
    port:latex2html \
    port:imagemagick
  configure.args-delete -DFEEL_ENABLE_DOCUMENTATION=OFF
  configure.args-append -DFEEL_ENABLE_DOCUMENTATION=ON
}

variant scipy description {Add python bindings} {
  depends_lib-append \
    port:py27-scipy\
    port:py27-numpy
}

variant applications description {Add applications support} {
  configure.args-delete -DFEELPP_ENABLE_APPLICATIONS=OFF
  configure.args-append -DFEELPP_ENABLE_APPLICATIONS=ON
}

variant octave description {Add octave bindings} {
  depends_lib-append \
    port:octave
  configure.args-append \
    -DCMAKE_DISABLE_FIND_PACKAGE_Octave=FALSE
}

#variant tbb description {Add tbb support} {
#  depends_lib_append \
#    port:tbb
#}
