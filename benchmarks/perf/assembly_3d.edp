// To run this script, first go inside $HOME/feel/assembly/np_1 and make sure that the integer l defined below has the same value of --parameters.l
int l = 6;
macro grad(u)[dx(u), dy(u), dz(u)]// EOM
macro div(u)(dx(u) + dy(u#B) + dz(u#C))// EOM
real Sqrt = sqrt(2.);
macro epsilon(u)[dx(u), dy(u#B), dz(u#C), (dz(u#B) + dy(u#C)) / Sqrt, (dz(u) + dx(u#C)) / Sqrt, (dy(u) + dx(u#B)) / Sqrt]// EOM
load "gmsh"
real[int, int] timers(l * 3, 5);
timers = 0;

for(int j = 1; j <= l; ++j) {
    mesh3 Th = gmshload3("hypercube_3_" + j + ".msh");
    for(int i = 0; i < 3; ++i) {
        if(i == 0) {
            func Pk = P2;
            timers(j - 1, 2) = clock();
            fespace Vh(Th, Pk);
            timers(j - 1, 2) = clock() - timers(j - 1, 2);
            timers(j - 1, 0) = Th.nt;
            timers(j - 1, 1) = Vh.ndof;
            timers(j - 1, 3) = clock();
            varf vPb(u, v) = int3d(Th)(grad(u)' * grad(v)) + int3d(Th)(v) + on(19, u = 0);
            matrix A = vPb(Vh, Vh);
            timers(j - 1, 3) = clock() - timers(j - 1, 3);
            timers(j - 1, 4) = clock();
            real[int] rhs = vPb(0, Vh);
            timers(j - 1, 4) = clock() - timers(j - 1, 4);
        }
        else if(i == 1) {
            func Pk = [P2, P2, P2];
            timers(l + j - 1, 2) = clock();
            fespace Vh(Th, Pk);
            timers(l + j - 1, 2) = clock() - timers(l + j - 1, 2);
            timers(l + j - 1, 0) = Th.nt;
            timers(l + j - 1, 1) = Vh.ndof;
            timers(l + j - 1, 3) = clock();
            real f = -1e3;
            real Young = 1e+8;
            real poisson = 0.25;
            real tmp = 1.0 + poisson;
            real mu = Young / (2.0 * tmp);
            real lambda = Young * poisson / (tmp * (1.0 - 2.0 * poisson));
            varf vPb([u, uB, uC], [v, vB, vC]) = int3d(Th)(lambda * div(u)' * div(v) + 2 * mu * (epsilon(u)' * epsilon(v))) + int3d(Th)(f * vB) + on(19, u = 0, uB = 0, uC = 0);
            matrix A = vPb(Vh, Vh);
            timers(l + j - 1, 3) = clock() - timers(l + j - 1, 3);
            timers(l + j - 1, 4) = clock();
            real[int] rhs = vPb(0, Vh);
            timers(l + j - 1, 4) = clock() - timers(l + j - 1, 4);
        }
        else if(i == 2 && j < l) {
            func Pk = [P2, P2, P2, P1];
            timers(l * 2 + j - 1, 2) = clock();
            fespace Vh(Th, Pk);
            timers(l * 2 + j - 1, 2) = clock() - timers(l * 2 + j - 1, 2);
            timers(l * 2 + j - 1, 0) = Th.nt;
            timers(l * 2 + j - 1, 1) = Vh.ndof;
            timers(l * 2 + j - 1, 3) = clock();
            varf vPb([u, uB, uC, p], [v, vB, vC, q]) = int3d(Th)(grad(u)' * grad(v) + grad(uB)' * grad(vB) + grad(uC)' * grad(vC) - div(u) * q - div(v) * p) + int3d(Th)(vC) + on(19, u = 0, uB = 0, uC = 0);
            matrix A = vPb(Vh, Vh);
            timers(l * 2 + j - 1, 3) = clock() - timers(l * 2 + j - 1, 3);
            timers(l * 2 + j - 1, 4) = clock();
            real[int] rhs = vPb(0, Vh);
            timers(l * 2 + j - 1, 4) = clock() - timers(l * 2 + j - 1, 4);
        }
    }
}
cout << "hsize\t\tnelements\tnDof\t\tFunctionSpace\tmatrix\t\tform2\t\tform1" << endl;
cout.precision(6);
cout.fixed;
for(int j = 0; j < 3 * l; ++j) {
    cout << "nan\t\t";
    for(int i = 0; i < 2; ++i)
        cout << int(timers(j, i)) << "\t\t";
    cout << timers(j, 2) << "\t0\t\t";
    for(int i = 3; i < 5; ++i) {
        cout << timers(j, i) << "\t";
    }
    cout << endl;
}
