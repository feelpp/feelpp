/* -*- mode: c++; coding: utf-8 -*- */
namespace Feel {
    /** \page Decomposition Domain Decomposition Methods
\author By Abdoulaye Samake
\author Vincent Chabannes
\author Christophe Prudâ€™homme

\tableofcontents
<br>
<hr>
<br>

\section Introduction A Really Short Introduction
In mathematics, numerical analysis, and numerical partial differential equations, domain decomposition methods solve
a boundary value problem by splitting it into smaller boundary value problems on subdomains and iterating to coordinate
the solution between the adjacent subdomains. A corse problem with one or few unknowns per subdomain is used to further
coordinate the solution between the subdomains globally.

\section D1 A 1D Model
We consider the following laplacian boundary value problem
\f{equation}
  \left \{
    \begin{aligned}
      & -u"(x) = f(x) \quad \text{in} \quad  ]0,1[ \\
      & u(0) =\alpha, ~ u(1) = \beta
    \end{aligned}
  \right.
\label{eq:30}
\f}

where \f$\alpha, \beta \in \mathbb R.\f$

\subsection D1_Schwartz Schwartz Algorithms
The schwartz overlapping multiplicative algorithm with dirichlet interface conditions for this problem at \f$n^{th}\f$ iteration is given by
\f{equation}
  \label{eq:31}
  \left \{
    \begin{aligned}
      -u_1"^n(x) & =  f(x) \quad  \text{in}  \quad  ]0,b[  \\
       u_1^n(0) & =  \alpha \\
       u_1^n(b)  & = u_2^{n-1}(b)
    \end{aligned}
  \right.
\qquad \text{and} \qquad
  \left \{
    \begin{aligned}
      -u_2"^n(x) & =  f(x) \quad  \text{in}  \quad  ]a,1[  \\
      u_2^n(1) & =  \beta \\
      u_2^n(a)  & = u_1^n(a)
    \end{aligned}
  \right.
\f}

where \f$ n \in \mathbb N^*, a, b \in \mathbb R \f$ and \f$a < b\f$. <br>
Let \f$e_i^n = u_i^n-u~(i=1,2)\f$, the error at \f$n^{th}\f$ iteration relative to the exact solution, the convergence rate is given by
\f{equation}
  \rho = \frac{\vert e_1^n  \vert}{\vert e_1^{n-1}  \vert} = \frac{a}{b}\frac{1-b}{1-a} = \frac{\vert e_2^n  \vert}{\vert e_2^{n-1}  \vert} .
  \label{eq:32}
\f}

\subsection D1_Variational Variational formulations
find \f$u\f$ such that
\f{equation*}
  \int_0^b u_1'v' = \int_0^b fv \quad \forall v \qquad \text{in the first subdomain} ~\Omega_1 = ]0,b[
\f}

\f{equation*}
  \int_a^1 u_2'v' = \int_a^1 fv \quad \forall v \qquad \text{in the second subdomain} ~ \Omega_2 = ]a,1[
\f}

\section Overlapping A 2 domain overlapping Schwartz method in 2D and 3D
We consider the following laplacian boundary value  problem
\f{equation}
  \left \{
    \begin{aligned}
      -\Delta u & = f \quad \text{in} \quad  \Omega \\
      u & = g \quad \text{on} \quad  \partial\Omega
    \end{aligned}
  \right.
 \label{eq:33}
\f}
where \f$\Omega \subset \mathbb R^d, d=2,3\f$ and \f$g\f$ is the dirichlet boundary value.

\subsection Overlapping_Schwartz Schwartz algorithms
The schwartz overlapping multiplicative algorithm with dirichlet interface conditions for this problem on two subdomains \f$\Omega_1\f$
and \f$\Omega_2\f$ at \f$n^{th}\f$ iteration is given by
\f{equation}
  \label{eq:34}
  \left \{
    \begin{aligned}
      -\Delta u_1^n & =  f \quad \qquad  \text{in}  \quad  \Omega_1  \\
       u_1^n  & =  g \quad \qquad  \text{on} \quad \partial \Omega_1^{ext}\\
       u_1^n  & = u_2^{n-1} \quad ~~  \text{on} \quad \Gamma_1
    \end{aligned}
  \right.
\qquad \text{and} \qquad
  \left \{
    \begin{aligned}
      - \Delta u_2^n & =  f \quad \qquad  \text{in}  \quad  \Omega_2  \\
      u_2^n  & =  g  \quad \qquad  \text{on} \quad \partial \Omega_2^{ext}\\
      u_2^n  & = u_1^n \qquad~~  \text{on} \quad \Gamma_2
    \end{aligned}
  \right.
\f}

\subsection Overlapping_Variational Variational formulations
\f{equation*}
  \begin{aligned}
    \int_{\Omega_i} \nabla u_i \cdot \nabla v = \int_{\Omega_i} fv   \quad \forall~ v,~i=1,2.
  \end{aligned}
\f}

\subsubsection Overlapping_Implementation Implementation
\co
//  Implementation of the local problem
template<Expr>
void
localProblem(element_type& u, Expr expr)
{
 // Assembly of the right hand side $ \mathlarger \int_\Omega fv $
    auto F = M_backend->newVector(Xh);
    form1( _test=Xh,_vector=F, _init=true ) =
           integrate( elements(mesh), f*id(v) );
    F->close();
                                       
 // Assembly of the left hand side $ \mathlarger \int_\Omega \nabla u \cdot  \nabla v$
    auto A = M_backend->newMatrix( Xh, Xh );
    form2( _test=Xh, _trial=Xh, _matrix=A, _init=true ) =
           integrate( elements(mesh), gradt(u)*trans(grad(v)) );
    A->close();
                                    
 // Apply the dirichlet boundary conditions
    form2( Xh, Xh, _matrix=A ) +=
           on( markedfaces(mesh, "Dirichlet") ,u,F,g);
                                    
 // Apply the dirichlet interface conditions
    form2( Xh, Xh, _matrix=A ) +=
           on( markedfaces(mesh, "Interface") ,u,F,expr);
                                    
 // solve the linear system $ A u = F $
    M_backend->solve(_matrix=A, _solution=u, _rhs=F );
}
                                    
  unsigned int cpt = 0;
  double tolerance = $1e-8$;
  double maxIterations = 20;
  double l2erroru$_1$ = 1.;
  double l2erroru$_2$ = 1;
                                    
 // Iteration loop
                                    
  while( (l2erroru$_1$ +l2erroru$_2$) > tolerance && cpt <= maxIterations)
  {
                                    
    // call the localProblem on the first subdomain $\Omega_1$
       localProblem(u$_1$, idv(u$_2$));
                                    
    // call the localProblem on the first subdomain $\Omega_2$
       localProblem(u$_2$, idv(u$_1$));
                                    
    // compute L2 errors on each subdomain
       L2erroru$_1$ = l2Error(u$_1$);
       L2erroru$_2$ = l2Error(u$_2$);
                                    
    // increment the counter
        ++cpt;
  }

\eco

\subsection Overlapping_Numerical Numerical results in 2D case
The numerical results presented in the following table correspond to the partition of the global domain \f$\Omega\f$ in two subdomains \f$\Omega_1\f$ and \f$\Omega_2\f$ and the following configuration:
\li \f$ g(x,y) = \sin(\pi x)\cos(\pi y)\f$ : the exact solution
\li \f$f(x,y) = 2\pi^2g\f$ : the right hand side of the equation
\li \f$\mathbb P_2\f$ approximation : the lagrange polynomial order
\li hsize \f$= 0.02\f$ : the mesh size
\li tol \f$=1e-9\f$ : the tolerance

<center>
<table border=0px>
<tr>
  <td>\image html dd2dgeometry.png</td>
  <td>\image html dd2dmesh.png</td>
</tr>
<tr>
  <td><center>Two overlapping subdomains</center></td>
  <td><center>Two overlapping meshes</center></td>
</tr>
<tr>
<th align="center" colspan="2">Geometry</th>
</tr>
</table>
</center>

<table class="manual">
<tr>
  <th>Number of iterations</th><td>\f$\mathbf {\| u_1-u_{ex}\|_{L_2} }\f$</td><td>\f$\mathbf{\| u_2-u_{ex}\|_{L_2}}\f$</td>
</tr>
<tr>
  <td>11 </td><td> 2.52e-8 </td><td> 2.16e-8 </td>
</tr>
</table>



\subsection Overlapping_Solutions Numerical Solutions in 2D Case
<center>
<table border=0px>
<tr>
  <td>\image html iter_1.png</td>
  <td>\image html iter_10.png</td>
</tr>
<tr>
  <td><center>First Iteration</center></td>
  <td><center>\f$ 10^{th}\f$ Iteration</center></td>
</tr>
<tr>
  <th align="center" colspan="2">Isovalues of Solution in 2D</th>
</tr>
</table>
</center>

\section Computing Computing the eigenmodes of the Dirichlet to Neumann operator
\subsection Computing_Description Problem description and variational formulation
We consider at the continuous level the Dirichlet-to-Neumann(DtN) map on \f$\Omega\f$, denoted by DtN\f$_{\Omega}\f$.
Let \f$u: \Gamma \longmapsto \mathbb R, \f$
\f{equation*}
  \label{eq:35}
\text{DtN}_{\Omega}(u) = \kappa \frac{\partial v}{ n} \Big |_{\Gamma}
\end{equation*}
where $v$ satisfies
\begin{equation}
  \label{eq:36}
\left\{
  \begin{aligned}
    & \mathcal L(v):= (\eta - \text{div}(\kappa \nabla))v = 0 & \text{dans} \quad \Omega,\\
    & v = u & \text{sur} \quad \Gamma
  \end{aligned}
\right.
\f}

where \f$\Omega\f$ is a bounded domain of \f$\mathbb R^d\f$ (d=2 or 3), and \f$\Gamma\f$ it border, \f$\kappa\f$ is a positive
diffusion function which can be discontinuous, and \f$\eta \geq 0\f$. The eigenmodes of the Dirichlet-to-Neumann
operator are solutions of the following eigenvalues problem
\f{equation}
  \label{eq:37}
  \text{DtN}_{\Omega}(u) = \lambda \kappa u
\f}

To obtain the discrete form of the DtN map, we consider the variational form of \f$(1)\f$. let's define the
bilinear form \f$a : H^1(\Omega) \times H^1(\Omega) \longrightarrow \mathbb R \f$,
\f{equation*}
  \label{eq:41}
  a(w,v) := \int_\Omega \eta w v + \kappa \nabla w \cdot \nabla v .
\f}

With a finite element basis \f$\{ \phi_k \}\f$, the coefficient matrix of a Neumann boundary value problem in \f$\Omega\f$ is
\f{equation*}
\label{eq:42}
  A_{kl} := \int_\Omega \eta \phi_k \phi_l + \kappa \nabla \phi_k \cdot \nabla \phi_l .
\f}

A variational formulation of the flux reads
\f{equation*}
  \label{eq:43}
\int_\Gamma \kappa \dfrac{\partial v}{\partial n} \phi_k = \int_\Omega \eta v \phi_k + \kappa \nabla v \cdot \nabla \phi_k \quad \forall~ \phi_k.
\f}

So the variational formulation of the eigenvalue problem \f$(2)\f$ reads
\f{equation}
\label{eq:40}
 \int_\Omega \eta v \phi_k + \kappa \nabla v \cdot \nabla \phi_k = \lambda \int_\Gamma \kappa v \phi_k  \quad \forall~ \phi_k.
\f}

Let \f$B\f$ be the weighted mass matrix
\f{equation*}
  \label{eq:44}
  (B)_{kl} = \int_\Gamma \kappa \phi_k \phi_l
\f}

The compact form of \f$(3)\f$ is
\f{equation}
  \label{eq:45}
  Av = \lambda B v
\f}

\subsection Computing_Implementation Implementation
Assembly of the right hand side \f$ B = \int_\Gamma \kappa v w \f$
<!-- Assembly of the right hand side \f$ B = \mathlarger \int_\Gamma \kappa v w \f$ -->
\co
 auto B = M_backend->newMatrix( Xh, Xh ) ;
 form2( _test=Xh, _trial=Xh, _matrix=B, _init=true );
 for( int marker : flags )
 {
   form2( Xh, Xh, _matrix=B ) +=
   integrate( markedfaces(mesh,marker), kappa*idt(u)*id(v) );
 }
 B->close();
\eco
Assembly of the left hand side \f$ A = \int_\Omega \eta v w + \kappa \nabla v \cdot \nabla w \f$
<!-- Assembly of the left hand side \f$ A = \mathlarger \int_\Omega \eta v w + \kappa \nabla v \cdot \nabla w \f$ -->
\co
 auto A = M_backend->newMatrix( Xh, Xh ) ;
 form2( _test=Xh, _trial=Xh, _matrix=A, _init=true ) =
 integrate( elements(mesh), kappa*gradt(u)*trans(grad(v)) + nu*idt(u)*id(v) );
 A->close();
                     
// eigenvalue solver options
 int nev = ioption("solvereigen-nev");
 int ncv = ioption("solvereigen-ncv");;
// definition of the eigenmodes
 SolverEigen<double>::eigenmodes_type modes;
\eco
solve the eigenvalue problem \f$ Av =  \lambda B v \f$
\co
 modes=
       eigs( _matrixA=A,
             _matrixB=B,
             _nev=nev,
             _ncv=ncv,
             _transform=SINVERT,
             _spectrum=SMALLEST_MAGNITUDE,
             _verbose = true );
                                            
}
\eco

\subsection Computing_Solutions Numerical solutions

<center>
<table border=0px>
<tr>
  <td>\image html mode-0.png</td>
  <td>\image html mode-1.png</td>
  <td>\image html mode-2.png</td>
</tr>
<tr>
  <td><center>first mode</center></td>
  <td><center>second mode</center></td>
  <td><center>third mode</center></td>
</tr>
<tr>
<th align="center" colspan="3">Three eigenmodes</th>
</tr>
</table>
</center>



These numerical solutions correspond to the following configuration :
\li \f$\mathbb P_2\f$ approximation : the lagrange polynomial order
\li hsize \f$= 0.02\f$ : the mesh size
\li \f$\mu = \kappa = 1.\f$


*/
}
